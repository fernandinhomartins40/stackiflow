# ðŸš€ Stacki Nginx Configuration
# Serving www.stacki.com.br

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;

    # Performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;

    # Upstream backend
    upstream stacki_backend {
        server stacki:3000;
        keepalive 32;
    }

    upstream postgrest_backend {
        server postgrest:3000;
        keepalive 16;
    }

    # Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name stacki.com.br www.stacki.com.br;
        
        # Let's Encrypt challenge
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        
        # Redirect all HTTP to HTTPS
        location / {
            return 301 https://www.stacki.com.br$request_uri;
        }
    }

    # Redirect non-www to www (HTTPS)
    server {
        listen 443 ssl http2;
        server_name stacki.com.br;
        
        # SSL configuration
        ssl_certificate /etc/letsencrypt/live/stacki.com.br/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/stacki.com.br/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
        
        return 301 https://www.stacki.com.br$request_uri;
    }

    # Main server - www.stacki.com.br
    server {
        listen 443 ssl http2;
        server_name www.stacki.com.br;

        # SSL configuration
        ssl_certificate /etc/letsencrypt/live/stacki.com.br/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/stacki.com.br/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

        # HSTS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Root location - Stacki Application
        location / {
            proxy_pass http://stacki_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 86400;
            proxy_redirect off;

            # Rate limiting for general requests
            limit_req zone=api burst=20 nodelay;
        }

        # API routes with specific rate limiting
        location /api/ {
            proxy_pass http://stacki_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;

            # Stricter rate limiting for API
            limit_req zone=api burst=10 nodelay;
        }

        # Auth routes with very strict rate limiting
        location /auth/ {
            proxy_pass http://stacki_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Very strict rate limiting for auth
            limit_req zone=login burst=5 nodelay;
        }

        # PostgREST API
        location /rest/ {
            rewrite ^/rest/(.*)$ /$1 break;
            proxy_pass http://postgrest_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # CORS headers for API
            add_header Access-Control-Allow-Origin "https://www.stacki.com.br" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept" always;
            add_header Access-Control-Max-Age 3600 always;

            if ($request_method = 'OPTIONS') {
                return 204;
            }

            limit_req zone=api burst=15 nodelay;
        }

        # Static assets with long cache
        location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|webp|woff|woff2|ttf|eot)$ {
            proxy_pass http://stacki_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
        }

        # Health check endpoint
        location /health {
            proxy_pass http://stacki_backend;
            proxy_set_header Host $host;
            access_log off;
        }

        # Robots.txt
        location /robots.txt {
            proxy_pass http://stacki_backend;
            proxy_set_header Host $host;
            access_log off;
        }

        # Security - block sensitive files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }
    }

    # Canvas/Preview subdomain support (se necessÃ¡rio)
    server {
        listen 443 ssl http2;
        server_name *.stacki.com.br;

        # SSL configuration (wildcard)
        ssl_certificate /etc/letsencrypt/live/stacki.com.br/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/stacki.com.br/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

        # Proxy to Stacki for subdomain handling
        location / {
            proxy_pass http://stacki_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }
    }
}